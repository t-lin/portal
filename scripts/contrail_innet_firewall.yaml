heat_template_version: 2013-05-23

description: >
  HOT template to create an in-net firewall

parameters:
    left_vn:
        type: string
        description: Name of left virtual network
    right_vn:
        type: string
        description: Name of right virtual network
    private_instance_name:
        type: string
        default: serviceInstance
        description: service instance name

resources:
    #service_template:
    #    type: OS::Contrail::ServiceTemplate
    #    properties:
    #        name: in-net-firewall
    #        service_mode: in-network
    #        service_type: firewall
    #        image_name: service1
    #        service_scaling: True
    #        availability_zone_enable: False
    #        ordered_interfaces: True
    #        flavor: m1.medium
    #        service_interface_type_list: { "Fn::Split" : [ ",", "management,right,left" ] }
    #        shared_ip_list: { "Fn::Split" : [ ",", "False,True,True" ] }
    #        static_routes_list: { "Fn::Split" : [ ",", "False" ] }
  
    service_instance:
        type: OS::Contrail::ServiceInstance
        properties:
            name: { get_param: private_instance_name }
            service_template: default-domain:in-net-firewall
            availability_zone: ""
            scale_out:
                max_instances: 1
                #auto_scale: True
            interface_list: [
                {
                    virtual_network: "auto"
                },
                {
                    virtual_network: {get_param: left_vn}
                },
                {
                    virtual_network: {get_param: right_vn}
                },
            ]
    #cpu_alarm_high:
    #    type: OS::Ceilometer::Alarm
    #    properties:
    #        description: Scale-up if the average CPU > 30% for 60 seconds
    #        meter_name: cpu_util
    #        statistic: avg
    #        period: 60
    #        evaluation_periods: 1
    #        threshold: 30
    #        #alarm_actions:
    #        #    - {get_attr: [scale_up_policy, alarm_url]}
    #        #matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
    #        comparison_operator: gt
    #cpu_alarm_low:
    #    type: OS::Ceilometer::Alarm
    #    properties:
    #        description: Scale-down if the average CPU < 10% for 60 seconds
    #        meter_name: cpu_util
    #        statistic: avg
    #        period: 60
    #        evaluation_periods: 1
    #        threshold: 10
    #        #alarm_actions:
    #        #    - {get_attr: [scale_down_policy, alarm_url]}
    #        #matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
    #        comparison_operator: lt


outputs:
    service_fq_name:
        description: FQ name of the service instance
        value: { get_attr: [ service_instance, fq_name] }
    service_uuid:
        description: UUID of the service instance
        value: { get_resource: service_instance }

